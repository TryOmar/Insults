generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String   @id
  username String
  insults  Insult[] @relation("UserInsults")
  blames   Insult[] @relation("BlamerInsults")
  archives Archive[] @relation("UserArchives")
  blameArchives Archive[] @relation("BlamerArchives")
  unblamerArchives Archive[] @relation("UnblamerArchives")
}

model Insult {
  id         Int      @id @default(autoincrement())
  guildId    String
  user       User     @relation("UserInsults", fields: [userId], references: [id])
  userId     String
  blamer     User     @relation("BlamerInsults", fields: [blamerId], references: [id])
  blamerId   String
  insult     String   @db.VarChar(100)   // unified 100-char limit
  note       String?  @db.VarChar(1000)  // paragraphs, links, short notes
  createdAt  DateTime @default(now())

  @@index([guildId, userId])
  @@index([guildId, blamerId])
  @@index([guildId, insult]) // Add index for text searches
}

model Setup {
  guildId         String   @id
  radarEnabled    Boolean  @default(false)
  blamerRoleId    String?  // Role that can use mutating commands
  frozenRoleId    String?  // Role that blocks all bot commands
  insulterRoleId  String?  // Role auto-assigned to top insulter
  insulterDays    Int      @default(0) // Time window for insulter role (0 = all-time)
  monitorChannelId String? // Channel for system notifications
  insultsChannelId String? // Channel for gameplay action logs
  createdAt       DateTime @default(now())
  updatedAt       DateTime @default(now()) @updatedAt
}

model Archive {
  id              Int      @id @default(autoincrement())
  originalInsultId Int      @unique // The original insult ID from the Insult table
  guildId         String
  user            User     @relation("UserArchives", fields: [userId], references: [id])
  userId          String
  blamer          User     @relation("BlamerArchives", fields: [blamerId], references: [id])
  blamerId        String
  insult          String   @db.VarChar(100)   // Same constraint as Insult
  note            String?  @db.VarChar(1000)  // Same constraint as Insult
  createdAt       DateTime

  unblamer        User     @relation("UnblamerArchives", fields: [unblamerId], references: [id])
  unblamerId      String
  unblamedAt      DateTime @default(now())

  @@index([guildId, userId])
  @@index([guildId, blamerId])
  @@index([guildId, unblamerId])
  @@index([guildId, insult]) // Add index for text searches
}
