import { ChatInputCommandInteraction, EmbedBuilder, MessageFlags, SlashCommandBuilder, ActionRowBuilder, StringSelectMenuBuilder, StringSelectMenuOptionBuilder, ComponentType, StringSelectMenuInteraction } from 'discord.js';
import { withSpamProtection } from '../utils/commandWrapper.js';
import { BASE_DELAY, VIOLATION_WINDOW, MAX_VIOLATIONS, MAX_LEVEL, LEVEL_RESET_TIME, LEVEL_DECAY_INTERVAL } from '../utils/cooldown.js';

// Track help message timeouts to remove dropdowns after 5 minutes
const helpMessageTimeouts = new Map<string, NodeJS.Timeout>();

export const data = new SlashCommandBuilder()
  .setName('help')
  .setDescription('Show help information and available commands');

// Command information with detailed descriptions and user stories
const COMMAND_INFO = {
  blame: {
    name: 'blame',
    description: 'Record an insult against a user',
    usage: '`/blame @user insult [note]`',
    userStory: '**User Story:** As a server member, I want to record when someone insults another person so we can track patterns and have accountability.',
    details: '**Parameters:**\n‚Ä¢ `user` (required) - The user being insulted\n‚Ä¢ `insult` (required) - The insult phrase (up to 3 words, max 20 chars per word)\n‚Ä¢ `note` (optional) - Additional context (‚â§500 chars)\n\n**Features:**\n‚Ä¢ Automatically sends DM to the insulted user\n‚Ä¢ Adds üëçüëé reactions for community feedback\n‚Ä¢ Validates input and prevents bot targeting'
  },
  unblame: {
    name: 'unblame',
    description: 'Delete a blame record by ID',
    usage: '`/unblame <id>`',
    userStory: '**User Story:** As a user, I want to remove blame records I created (or admins want to remove any) when they were mistakes or inappropriate.',
    details: '**Parameters:**\n‚Ä¢ `id` (required) - The blame record ID to delete (supports multiple IDs)\n\n**Permissions:**\n‚Ä¢ Anyone can unblame others\n‚Ä¢ You cannot unblame yourself if you are the target but not the blamer\n‚Ä¢ Admins can delete any record\n\n**Features:**\n‚Ä¢ Moves deleted records to archive for audit trail\n‚Ä¢ Supports multiple IDs in one command (separated by spaces or commas)\n‚Ä¢ Shows detailed summary of what was deleted\n‚Ä¢ Paginated results with navigation buttons\n‚Ä¢ Handles already archived records gracefully'
  },
  rank: {
    name: 'rank',
    description: 'Show the insult leaderboard',
    usage: '`/rank [days]`',
    userStory: '**User Story:** As a server member, I want to see who has been insulted the most so we can understand the social dynamics and patterns.',
    details: '**Parameters:**\n‚Ä¢ `days` (optional) - Number of calendar days to look back (0-3650)\n\n**Time Periods:**\n‚Ä¢ `/rank` or `/rank days:0` - All-time leaderboard\n‚Ä¢ `/rank days:1` - Today only (from midnight today ‚Üí now)\n‚Ä¢ `/rank days:7` - Last 7 full calendar days (including today)\n‚Ä¢ `/rank days:30` - Last 30 full calendar days (including today)\n\n**Features:**\n‚Ä¢ Shows users ranked by total insults received\n‚Ä¢ Displays points and usernames with time period in title\n‚Ä¢ Paginated for large servers\n‚Ä¢ Includes quick blame button for easy recording\n‚Ä¢ Ties broken by earliest first insult\n‚Ä¢ **Calendar Days:** Uses full calendar days, not rolling 24-hour periods\n‚Ä¢ **Default:** Shows all-time data if no arguments provided'
  },
  history: {
    name: 'history',
    description: 'Show insult history for a user or the whole server',
    usage: '`/history [@user]`',
    userStory: '**User Story:** As a user, I want to see the history of insults either for a specific person or the entire server to understand patterns and context.',
    details: '**Parameters:**\n‚Ä¢ `user` (optional) - Filter by specific user\n\n**Features:**\n‚Ä¢ Shows detailed table with IDs, users, and insults\n‚Ä¢ Displays statistics (total blames, users, insults)\n‚Ä¢ Shows insult frequency breakdown\n‚Ä¢ Paginated for large datasets\n‚Ä¢ Use `/detail <id>` for more info on specific records'
  },
  insults: {
    name: 'insults',
    description: 'Show insult statistics overall or for a specific word',
    usage: '`/insults [word]`',
    userStory: '**User Story:** As a server member, I want to see what insults are most common and analyze specific insult patterns to understand server culture.',
    details: '**Parameters:**\n‚Ä¢ `word` (optional) - Specific insult phrase to analyze (up to 3 words, max 20 chars per word)\n\n**Features:**\n‚Ä¢ **General view:** Shows all insults ranked by frequency\n‚Ä¢ **Word view:** Shows all instances of a specific insult\n‚Ä¢ Displays first/last/top users for each insult\n‚Ä¢ Paginated for large datasets\n‚Ä¢ Case-insensitive matching'
  },
  detail: {
    name: 'detail',
    description: 'Show full details for a blame record by ID',
    usage: '`/detail <id>`',
    userStory: '**User Story:** As a user, I want to see complete details of a specific blame record including who blamed whom, when, and any notes for full context.',
    details: '**Parameters:**\n‚Ä¢ `id` (required) - The blame record ID\n\n**Features:**\n‚Ä¢ Shows complete record information\n‚Ä¢ Works with both active and archived records\n‚Ä¢ Displays all metadata (user, blamer, time, note)\n‚Ä¢ Adds reactions for community feedback\n‚Ä¢ Handles archived records with special formatting'
  },
  radar: {
    name: 'radar',
    description: 'Toggle automatic insult detection on/off',
    usage: '`/radar <enabled>`',
    userStory: '**User Story:** As a server admin, I want to enable/disable automatic scanning of messages for insults so the bot can help monitor the server automatically.',
    details: '**Parameters:**\n‚Ä¢ `enabled` (required) - true/false to enable/disable\n\n**Permissions:**\n‚Ä¢ Requires "Manage Server" permission\n\n**Features:**\n‚Ä¢ Automatically scans messages for insult patterns\n‚Ä¢ Creates blame records when insults are detected\n‚Ä¢ Can be toggled on/off per server\n‚Ä¢ Ephemeral response for privacy'
  },
  archive: {
    name: 'archive',
    description: 'Show archived (unblamed) records',
    usage: '`/archive [@user] [role]`',
    userStory: '**User Story:** As a moderator, I want to see what blame records have been deleted and by whom for audit purposes and to understand moderation patterns.',
    details: '**Parameters:**\n‚Ä¢ `user` (optional) - Filter by user involved\n‚Ä¢ `role` (optional) - Filter by user role (insulted/blamer/unblamer)\n\n**Features:**\n‚Ä¢ Shows deleted blame records\n‚Ä¢ Displays who deleted each record\n‚Ä¢ Filterable by user and their role\n‚Ä¢ Paginated for large archives\n‚Ä¢ Shows original insult IDs for reference'
  },
  revert: {
    name: 'revert',
    description: 'Restore archived blames back into active records',
    usage: '`/revert <id>`',
    userStory: '**User Story:** As a user or admin, I want to restore accidentally deleted blame records back to active status when they were removed by mistake.',
    details: '**Parameters:**\n‚Ä¢ `id` (required) - The archived blame ID to restore\n\n**Permissions:**\n‚Ä¢ Original blamer can restore their records\n‚Ä¢ Admins can restore any record\n\n**Features:**\n‚Ä¢ Creates new active record with new ID\n‚Ä¢ Removes from archive after restoration\n‚Ä¢ Shows mapping of original ‚Üí new ID\n‚Ä¢ Detailed summary of restoration process'
  },
  clear: {
    name: 'clear',
    description: 'Clear DM messages sent by the bot to you',
    usage: '`/clear [count]`',
    userStory: '**User Story:** As a user, I want to clean up my DM conversation with the bot by removing a specific number of messages the bot has sent to me.',
    details: '**Parameters:**\n‚Ä¢ `count` (optional) - Number of bot messages to clear (default: 50, max: 100)\n\n**Usage:**\n‚Ä¢ Can only be used in private messages (DMs) with the bot\n‚Ä¢ Clears the most recent bot messages first\n‚Ä¢ Handles message age limits gracefully\n‚Ä¢ Shows count of successfully deleted messages\n\n**Features:**\n‚Ä¢ Customizable message count (1-100)\n‚Ä¢ Individual deletion for reliability\n‚Ä¢ Error handling for permission issues\n‚Ä¢ Confirmation of deletion count\n‚Ä¢ Smart fetching to ensure enough bot messages are found'
  },
  config: {
    name: 'config',
    description: 'Configure bot settings for this server',
    usage: '`/config action:<choice> [role/channel/days]`',
    userStory: '**User Story:** As a server administrator, I want to configure role-based permissions and logging channels so I can control who can use the bot and where notifications are sent.',
    details: '**Actions:**\n‚Ä¢ `Set Blamer Role` + @role - Set role for mutating commands\n‚Ä¢ `Set Frozen Role` + @role - Set role that blocks all commands\n‚Ä¢ `Set Insulter Role` + @role - Set auto-assigned top insulter role\n‚Ä¢ `Set Insulter Days` + days - Set time window for insulter calculation\n‚Ä¢ `Set Monitor Channel` + #channel - Set system notifications channel\n‚Ä¢ `Set Insults Channel` + #channel - Set gameplay action logging channel\n‚Ä¢ `View Configuration` - View current configuration\n\n**Permissions:**\n‚Ä¢ Requires "Manage Server" permission\n\n**Features:**\n‚Ä¢ Role-based access control for commands\n‚Ä¢ Automatic top insulter role assignment\n‚Ä¢ Configurable logging channels\n‚Ä¢ Time-based insulter calculations\n‚Ä¢ Easy configuration management'
  },
  'anti-spam': {
    name: 'anti-spam',
    description: 'Anti-spam system information (NOT A COMMAND)',
    usage: 'System Information',
    userStory: '**User Story:** As a user, I want to understand how the anti-spam system works so I can use the bot effectively without getting blocked.',
    details: `**System Configuration:**\n‚Ä¢ \`BASE_DELAY = 3s\` - Wait after each command\n‚Ä¢ \`VIOLATION_WINDOW = 10s\` - Time to check for spam\n‚Ä¢ \`MAX_VIOLATIONS = 3\` - Commands in window ‚Üí violation\n‚Ä¢ \`MAX_LEVEL = 10\` - Max escalation level\n‚Ä¢ \`LEVEL_RESET_TIME = 5m\` - Inactivity before level drops\n‚Ä¢ \`LEVEL_DECAY_INTERVAL = 1m\` - Time between each level drop\n\n**How Anti-Spam Works:**\nA guardian watches your commands:\n\n**1.** Send a command ‚Üí wait \`BASE_DELAY\`\n**2.** Send \`MAX_VIOLATIONS\` too fast within \`VIOLATION_WINDOW\` ‚Üí level ‚Üë\n**3.** Each level doubles your wait up to \`MAX_LEVEL\` ‚Üí temporary block\n**4.** Stay quiet for \`LEVEL_RESET_TIME\` ‚Üí levels start dropping every \`LEVEL_DECAY_INTERVAL\` until back to normal\n\n**Tips:**\n‚Ä¢ Wait 3 seconds between commands to avoid violations\n‚Ä¢ If you get blocked, wait for the cooldown to expire\n‚Ä¢ Levels decrease automatically when you stop spamming\n‚Ä¢ The system is designed to be fair and prevent abuse`
  }
};

// Function to create the main help embed
function createMainHelpEmbed(): EmbedBuilder {
  const embed = new EmbedBuilder()
    .setTitle('üó°Ô∏è Insults Bot - Command Help')
    .setDescription('A comprehensive tracking system for monitoring and managing insult patterns in your Discord server')
    .setColor(0xDC143C)
    .addFields(
      {
        name: 'üìù Recording Commands',
        value: '`/blame @user insult [note]` - Record an insult against a user\n`/unblame <id>` - Delete a blame record by ID',
        inline: false
      },
      {
        name: 'üìä Viewing Commands',
        value: '`/rank` - Show the insult leaderboard\n`/insults [word]` - Show insult statistics\n`/history [@user]` - Show insult history\n`/detail <id>` - Show details for a specific blame record',
        inline: false
      },
      {
        name: '‚öôÔ∏è Management Commands',
        value: '`/config action:<choice> [options]` - Configure bot settings\n`/radar <enabled>` - Toggle automatic insult detection\n`/archive [@user] [role]` - Show archived blame records\n`/revert <id>` - Restore archived blames back into active records\n`/clear [count]` - Clear DM messages sent by the bot (DM only)',
        inline: false
      }
    );

  embed.addFields({
    name: 'üîç Get Detailed Help',
    value: 'Use the dropdown below to select any command for detailed information, user stories, and examples.',
    inline: false
  });

  return embed.setTimestamp();
}

// Function to create command detail embed
function createCommandDetailEmbed(commandInfo: any): EmbedBuilder {
  return new EmbedBuilder()
    .setTitle(`üìñ Command: /${commandInfo.name}`)
    .setDescription(commandInfo.description)
    .setColor(0x5865F2)
    .addFields(
      {
        name: 'üíª Usage',
        value: commandInfo.usage,
        inline: false
      },
      {
        name: 'üë§ User Story',
        value: commandInfo.userStory,
        inline: false
      },
      {
        name: 'üìã Details',
        value: commandInfo.details,
        inline: false
      }
    )
    .setTimestamp();
}

async function executeCommand(interaction: ChatInputCommandInteraction) {
  const guildId = interaction.guildId;
  const isDM = !guildId;

  // Create command selection dropdown
  const selectMenu = new StringSelectMenuBuilder()
    .setCustomId('help_command_select')
    .setPlaceholder('Select a command for detailed help...')
    .addOptions([
      new StringSelectMenuOptionBuilder()
        .setLabel('üè† Back to Main Help')
        .setDescription('Return to the main help overview')
        .setValue('main_help'),
      ...Object.values(COMMAND_INFO).map(cmd => 
        new StringSelectMenuOptionBuilder()
          .setLabel(`/${cmd.name}`)
          .setDescription(cmd.description)
          .setValue(cmd.name)
      )
    ]);

  const row = new ActionRowBuilder<StringSelectMenuBuilder>().addComponents(selectMenu);

  // Show interactive help with dropdown in both DMs and server channels
  const reply = await interaction.reply({ 
    embeds: [createMainHelpEmbed()], 
    components: [row]
  });
  
  // Set timeout to remove dropdown after 5 minutes
  const timeout = setTimeout(async () => {
    try {
      await interaction.editReply({ components: [] });
    } catch (error) {
      // Ignore errors (message might be deleted or interaction expired)
    }
    helpMessageTimeouts.delete(interaction.id);
  }, 300000); // 5 minutes
  
  helpMessageTimeouts.set(interaction.id, timeout);
}

// Function to handle string select menu interactions
export async function handleStringSelect(selectInteraction: StringSelectMenuInteraction) {
  const selectedValue = selectInteraction.values[0];
  
  // Create the dropdown row for reuse
  const selectMenu = new StringSelectMenuBuilder()
    .setCustomId('help_command_select')
    .setPlaceholder('Select a command for detailed help...')
    .addOptions([
      new StringSelectMenuOptionBuilder()
        .setLabel('üè† Back to Main Help')
        .setDescription('Return to the main help overview')
        .setValue('main_help'),
      ...Object.values(COMMAND_INFO).map(cmd => 
        new StringSelectMenuOptionBuilder()
          .setLabel(`/${cmd.name}`)
          .setDescription(cmd.description)
          .setValue(cmd.name)
      )
    ]);

  const row = new ActionRowBuilder<StringSelectMenuBuilder>().addComponents(selectMenu);
  
  if (selectedValue === 'main_help') {
    // Show main help embed
    await selectInteraction.update({ 
      embeds: [createMainHelpEmbed()], 
      components: [row] // Keep the dropdown for further selections
    });
  } else {
    // Show command detail
    const commandInfo = COMMAND_INFO[selectedValue as keyof typeof COMMAND_INFO];
    
    if (commandInfo) {
      const detailEmbed = createCommandDetailEmbed(commandInfo);
      
      // Update the main message with the selected command details
      await selectInteraction.update({ 
        embeds: [detailEmbed], 
        components: [row] // Keep the dropdown for further selections
      });
    }
  }
  
  // Clear any existing timeout for this interaction and set a new one
  const originalInteractionId = selectInteraction.message.interaction?.id;
  if (originalInteractionId) {
    const existingTimeout = helpMessageTimeouts.get(originalInteractionId);
    if (existingTimeout) {
      clearTimeout(existingTimeout);
    }
    
    // Set new timeout to remove dropdown after 5 minutes
    const timeout = setTimeout(async () => {
      try {
        await selectInteraction.editReply({ components: [] });
      } catch (error) {
        // Ignore errors (message might be deleted or interaction expired)
      }
      helpMessageTimeouts.delete(originalInteractionId);
    }, 300000); // 5 minutes
    
    helpMessageTimeouts.set(originalInteractionId, timeout);
  }
}

// Export with spam protection
export const execute = withSpamProtection(executeCommand);

